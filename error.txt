#include <QPainter>
#include "RocketSceneFinal.h"

RocketSceneFinal::RocketSceneFinal(QWidget *parent){
    launchPadOffSet = 30;
    rotation = 0.0;
    x = -width()/2 + launchPadOffSet + 25;
    y = 24;
    isconnected = false;
    serverHeight = 0.0;
    serverWidth = 0.0;
    update();

}

void RocketSceneFinal::paintEvent(QPaintEvent *evnt){
    if (serverHeight !=0.0 & serverWidth !=0.0){
        Hscale = static_cast<double>(height())/serverHeight;
        Wscale = static_cast<double>(width())/serverWidth;
    }
    QPainter painter(this);
    painter.translate(width()/2, height());
    painter.scale(1, -1);

    painter.setBrush(Qt::black);
    painter.drawRect(-width()/2, 0, width(), height());

    painter.setBrush(Qt::blue);
    painter.drawRect(-width()/2 + launchPadOffSet, 10, 50, 10);
    painter.drawRect(width()/2 - launchPadOffSet - 50, 10, 50, 10);

    painter.save();

    if(in_platform & serverHeight == 0.0 & serverWidth == 0.0){
        x = -width()/2 + launchPadOffSet + 25;
    //}else if(in_platform){

    }else{
        if (serverHeight == 0.0 & serverWidth == 0.0){
            Wscale = 1.0;
            Hscale = 1.0;
        }
        //x = x + 25;
    }

    painter.translate(x*Wscale, y*Hscale);
    painter.translate(0, 42);
    painter.rotate(rotation);
    painter.translate(0, -22);
    paintRocket(&painter);

    painter.restore();



}

void RocketSceneFinal::paintRocket(QPainter *painter) {

    // Рисуем основное тело
    painter->scale(1, -1);
    painter->setBrush(Qt::red);
    painter->drawRect(-12, -48, 24, 48);

    // Рисуем нос ракеты
    QPolygonF nose;
    nose << QPointF(-12, -48) << QPointF(12, -48) << QPointF(0, -68);
    painter->setBrush(Qt::gray);
    painter->drawPolygon(nose);

    // Рисуем двигатели
    painter->setBrush(Qt::yellow);
    painter->drawRect(-10, 0, 6, 6);
    painter->drawRect(4, 0, 6, 6);

    // Дополнительные элементы
    painter->setBrush(Qt::darkGray);
    painter->drawEllipse(QPointF(0, 5), 4, 6);
}

void RocketSceneFinal::setPositionUpdate(int x, int y){
    this->x = x;
    this->y = y;
    update();

}

void RocketSceneFinal::setRotationUpdate(double uhel){
    this->rotation = uhel;
    update();

}

//void RocketSceneFinal::setSceneDimensions(int width, int height){
//    this->sceneWidth = width;
//    this->sceneHeight = height;
//    setFixedSize();

//}

QSize RocketSceneFinal::sizeHint() const {
    return QSize(1000, 600); // Укажите подходящие размеры
}
